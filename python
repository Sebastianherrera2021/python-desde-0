print("CURSO DE ERIC EL NOMADA ( DE CERO A HEROE)")
# Estructuras de datos
# Listas [] alt y la tecla que esta al lado de la p
lista=[10,"Hola",200.4] # se puede editar o variar y no tiene orden
# Diccionarios
Diccionario= {"Palabra": "Significado","clave":"valor"} #clave - significado
# Tuplas, orden inmutable, no se pueden editar
Tuplas= (10,"hola",200.4)
# Sets coleccion de objetos no ordenados
Sets= {"a","b"}
#############################################################
print("Numeros")
a=10
b=100
c=a/b
d=a//b
e=a**2
print(c) #con decimales
print(d) # sin decimales
print(e) # elevado a la dos

#########################################################
# Cadena de texto
print("Hola \nmundo") #es un enter
print(len("Hola")) #cuenta
hola="Hola mundo"
print(hola[0]) # Extrae indice
print(hola[-1]) # Extrae ultimo indice
print(hola[0:3]) #del indice 0 al 3
print(hola[0:7:2]) #saltos de 2

# pueden ser cambiadas
## PARA EDITAR UNA CADENA SE DEBEN CONCATENARLAS
name= "Pam"
ultimas_letras=name[1:3]
print("S"+ultimas_letras)

# MULTIPLICAR LETRAS
letra = "z"
letra= letra*10
print(letra) #multiplica la letra *10

# MAYUSCULA
x= "Hola mundo"
x=x.upper()
print(x)
# LOWER PARA MINUSCULA
# SPLIT PARA SEPARAR LAS PALABRAS - ciencia de datos
x= "Hola mundo"
x=x.split() # separacion por espacios, tambien se puede por letras
print(x)

########################################################
"""formateo cadena de texto"""
# variable en cadena de texto, interpolaciòn de cadenas
print("Esto es una cadena de {}".format("TEXTO"))
# Pone lo que esta despues en los corchetes
resultados = 100/888
print("los resultados son {r:1.3f}".format(r=resultados))
# Esto era para imprimir solo 3 decimales, 1 = espacio
# F - STRINGS
nombre = "Erick"
print(f"los resultados son {nombre}")

##########################################################
"""LISTAS""" #son mutables a diferencia de cadenas de texto
mi_lista= ["uno","dos","tres"]
otra_lista=["cuatro","cinco"]
print(mi_lista[1:]) # no cuenta el primer indice
nueva_lista=mi_lista+otra_lista
nueva_lista[0]="Eric"
print(nueva_lista)
nueva_lista.append("seis")
print(nueva_lista) #lo agrega
item_popeado=nueva_lista.pop(2) #remover elementos de una lista, indices
print(item_popeado) 
#ordenar:
sorte=[1,7,4,5]
sorte.sort() #menor a mayor
sorte.reverse() #mayor a menor
print(sorte)

############################################################
"""DICCIONARIOS"""
mi_diccionario= {"manzana":"2.08","pera":"3"}
print(mi_diccionario["manzana"]) #se llama por llave
## se le puede añadir listas al diccionario
mi_diccionario= {"manzana":"2.08","kekes":["manzana","platano"],"pera":"3"}
print(mi_diccionario)
print(mi_diccionario["kekes"][1].upper())
print(mi_diccionario.keys()) #muestra lleves
print(mi_diccionario.values()) #muestra valores
print(mi_diccionario.items()) #muestra items "pares"

############################################################
"""TUPLAS"""
t=(1,3,5)
print(type(t))
print(t[0:2])
print(t.count(1)) #no hay muchas cosas que se puedan usar

#t[0]= "nuevo"
lista = [1,2,3]
lista[0]= "nuevo"
#print(t)
#no permite la reasignaciòn
#quiero valores que no se reasignen
############################################################
""" SETS """
miset= set()
miset.add(1) #miset.add(1,2) no deja
print(miset)
# valores unicos
milista=[1,1,1,1,2,3,4,4]
print(set(milista)) #muestra los que estan, no tienen orden

###########################################################
""" IF, ELIF Y ELSE"""
Hambre=True #se le puede tambien poner false
sed = True

if Hambre and not sed: #se le puede poner if True para asumir algo como hecho
    print("Tengo Hambre")
elif Hambre == True and sed== True:
    print("Tengo hambre y sed")
else:
    print("Estoy lleno")

###########################################################
""" CICLOS FOR""" # PARA ITERAR 
milistap = [1,2,3,4,5,6,7,8]
# num es el contador
for num in milistap: # es como si num fuera i "la iteracion"
    #para cada numero en nuestra lista imprima
    print("Hola") # imprime ocho hola

for num in milistap: # es como si num fuera i "la iteracion"
    print(num) # imprime ocho hola
print("con par e impar")

for i in milistap:
    #numeros pares e impartos
    if i % 2 ==0:
        print(f"numero par {i}")
    else:
        print(f"Numero impar: {i}") 
        
# otro con declaraciòn =0
milistap = [1,2,3,4,5,6,7,8]
suma_lista=0
#iteracion de suma y se va acumulando
for num in milistap:
    suma_lista= suma_lista+num
    print(suma_lista)
    
for letter in "Hola mundo":
    print(letter)

# Despaquetar tuplas
milista2= [(1,2),(3,4),(4,5),(6,7)]
print(len(milista2))

for item in milista2:
    print(item)
    
for (a,b) in milista2: #desempaqueta elementos de la tupla
    print(a)
    print(b)

d= {"y1":1,
    "y2":2,
    "y3":3}

for i in d:
    print(i) # imprime las llaves
    
for i in d.items():
    print(i) # imprime las llaves con el valor
    
for llave,valor in d.items():
    print(valor) # imprime solo el valor
    
############################################################
""" CICLO WHILE """
# break, continue y pass
x=0
while x<5: ## por lo general esta condicion es falsa
    print(f"El valor actual de x es: {x}")
    x=x+1 # sin esto el bucle se queda en infinito x+=1
else:
    print("x no es mayor que 5")

y= [1,2,3]
for item in y:
    pass ##pasando el error
print("fin del libreto")

y="erick"
for letter in y:
    if letter=="i":
        continue
    print(letter)

for letter in y:
    if letter=="i":
        break
    print(letter)
    
#############################################################
"""operadores utiles"""
for num in range(10): #se crear el rango
    print(num)
for num in range(0,11,2):
    print(num)
# tambien se puede con lista
print(list(range(0,11,2))) # generador

contador_indice=0
palabra="Hola"

for letter in palabra:
    print(palabra[contador_indice])
    contador_indice +=1

for item in enumerate(palabra):
    print(item)

for index,letter in enumerate(palabra):
    print(index)
    print(letter)
    print("\n")

milis1 = [1,2,3]
milis2 = ["a","b","c"]
e= {"k1":1}
# para emparejar
for i in zip(milis1,milis2):
    print(i)
for i in e:
    print("verdadero")
for i in e.keys():
    print("verdadero")
else:
    print("falso")

print(min(milis1))

## para importar un paquete:
from random import shuffle

##########################################
""" Listas de compresiòn"""
# forma de crear una lista rapidamente
mi_cadena="Hola"
mi_lista=[]
for letter in mi_cadena:
    mi_lista.append(letter)
print(mi_lista)
    
# forma mas eficiente:
mi_lista=[x for x in range(0,11)]
print(mi_lista)

# celcius a farenheit
celcius=[0,10,20,34.5]
farenheit=[((9/5)*temp+32)for temp in celcius]
print(farenheit)

# forma anterior:
farenheit =[]
for temp in celcius:
    farenheit.append(((9/5)*temp+32))
print(farenheit)
#######################################################
""" metodos y documentaciòn"""
# pagina python y en browse documentation, leerla
# what's new, cambian algunas cosas en las versiones
# library in reference

#######################################################
""" FUNCIONES"""
# PERMITEN CREAR BLOQUES DE CODIGO QUE PODEMOS EJECUTAR
# VARIAS VECES, SIN NECESIDAD DE REESCRIBIR CODIGO

def decir_hola (): # nombre
    print("Hola")
    print("como")
    print("estas")
decir_hola() # se le llama

def suma (num1,num2): #se le agrego parametros
    sum_total=num1+num2
    print(sum_total)
suma(2,5) # argumento

# LOGICA EN FUNCIONES
# chequear numeros pares en base a lo que se le agregue a la
# funcion
def chequear_par_lista(num_list): 
    for number in num_list:
        if number %2==0:
            print("True")
            return True
        else:
            pass
    print("False")
    return False
chequear_par_lista([2,3,5])
###########################################################
""" ARGS Y KWARGS"""
# ARGUMENTOS POSICIONALES
def func(*args): # retorna una tupla
    return print(sum(args)*0.05)
func(40,60)
## antes solo teniamos dos argumentos, ahora mas

def func(**kwargs): # dicc
    if "fruit" in kwargs:
        print("mi futata escogida es {}".format(kwargs["fruit"]))
    else:
        print("No hay fruta")
func(fruit="manzana",veggie="lechuga")

## CON AMBAS JUNTAS
def func(*args, **kwargs):
    print(args)
    print(kwargs)
    print("me gustaria {} {}".format(args[0], kwargs["comida"]))
func(10,30,50,comida="leche",animal="perro")
##############################################################
""" FUNCIONES LAMBDA, MAPAS Y FILTROS """
# Funcion mapa, llenar funcion con lista de mapas
numeros = [1,2,3,4,5]
def square(num):
    result= num **2
    return(result)
for i in map(square,numeros):
    print(i)

print(list(map(square,numeros)))

# filtros para solo numero pares
def check_even(num):
    return num%2 ==0
for n in filter(check_even,numeros):
    print(n)

# lambda
numeros = [1,2,3,4,5]
square=lambda num: num**2
print(list(map(lambda num: num**2, numeros)))
print(list(filter(lambda num: num%2==0, numeros)))
########################################################
""" FUNCIONES ANINADAS"""
name = "variable global"

def saludo():
    #enclosing
    name="Juan se"
    
    def hola():
        #local
        name="variable local"
        print(" Hola"+ name)
    hola()
    
saludo()

########################################################
""" programaciòn orientada a objetos"""
# funciones se ponen dentro de clases
# clases

class perro():
    
    def __init__(self,raza,nombre,puntos): 
        
    #atributos
    self.raza=raza
    self.nombre=nombre
    
    #esperamos valor bool
    self.puntos=puntos
huskie= perro(raza="huskie",nombre="sam",puntos=False)

#########################################################
""" HERENCIA Y POLIMORFISMO"""
class animal():
    def __init__(self):
        print("anumal creado")
    def quiensoy(Self):
        print("soy un animal")
    def comer(self):
        print("Estoy comiendo")
        
class perro(animal):
    
    def __init__(self):
        animal.__init__(self)
        print("perro creado")
        
    def quien_soy(Self):
        print("soy un perroo")
nuevoperro=perro()
miperro=perro()
miperro.quien_soy()

#se puede importar clases de un archivo a otro
######################################################
""" librerias"""
#pip install
#paquete ciencia de datos
#tensorflow
#matplotlib
#pandas
#numpy
